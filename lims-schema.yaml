openapi: 3.0.0

info:
  version: "0.0.1"
  title: "LIMS API"
  contact:
    email: "emilio.righi@crg.eu"

tags:
- name: "projects"
- name: "links"
- name: "audit"
- name: "files"
- name: "models"
- name: "records"
- name: "stats"
- name: "users"
- name: "upload"

paths:

  /auth/login:
    post:
      tags: ["auth"]
      summary: "User login"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: "Login successful"

  /auth/logout:
    post:
      tags: ["auth"]
      summary: "User logout"
      responses:
        "200":
          description: "Logout successful"

  /users:
    get:
      tags: ["users"]
      summary: "List all users"
      responses:
        "200":
          description: "Successful operation"

  /users/{name}:
    get:
      tags: ["users"]
      summary: "Get user by name"
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /users/{name}/projects:
    get:
      tags: ["users"]
      summary: "Get projects for a user"
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /lookup:
    get:
      tags: ["stats"]
      summary: "Global lookup"
      responses:
        "200":
          description: "Successful operation"

  /files/{hash}/download:
    get:
      tags: ["files"]
      summary: "Download file by hash"
      parameters:
        - in: path
          name: hash
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "File download"

  /projects/{project_id}/models/{model_name}/files/{type}/download:
    get:
      tags: ["files"]
      summary: "Download model files by type"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
        - in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "File download"

  /audit-logs:
    get:
      tags: ["audit"]
      summary: "Get all audit logs"
      responses:
        "200":
          description: "Successful operation"

  /projects/{project_id}/audit-logs:
    get:
      tags: ["audit"]
      summary: "Get audit logs for a project"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /audit-logs/{document_type}/{document_id}:
    get:
      tags: ["audit"]
      summary: "Get audit logs for a document"
      parameters:
        - in: path
          name: document_type
          required: true
          schema:
            type: string
        - in: path
          name: document_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /projects:
    get:
      tags: ["projects"]
      summary: "List all projects"
      responses:
        "200":
          description: "Successful operation"
    post:
      tags: ["projects"]
      summary: "Create a new project"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "201":
          description: "Project created"

  /projects/{project_id}:
    get:
      tags: ["projects"]
      summary: "Get project by ID"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"
    put:
      tags: ["projects"]
      summary: "Update project by ID"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: "Project updated"
    delete:
      tags: ["projects"]
      summary: "Delete project by ID"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Project deleted"

  /projects/{project_id}/archive:
    post:
      tags: ["projects"]
      summary: "Archive a project"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Project archived"

  /projects/{project_id}/unarchive:
    post:
      tags: ["projects"]
      summary: "Unarchive a project"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Project unarchived"

  /projects/{project_id}/schema:
    get:
      tags: ["projects"]
      summary: "Get project schema"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /projects/{project_id}/lookup:
    get:
      tags: ["projects"]
      summary: "Lookup project data"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /models:
    get:
      tags: ["models"]
      summary: "List all models"
      responses:
        "200":
          description: "Successful operation"
    post:
      tags: ["models"]
      summary: "Create a new model"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Model"
      responses:
        "201":
          description: "Model created"

  /projects/{project_id}/models:
    get:
      tags: ["models"]
      summary: "List models for a project"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /projects/{project_id}/models/{model_name}:
    get:
      tags: ["models"]
      summary: "Get model by name in project"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"
    put:
      tags: ["models"]
      summary: "Update model by name in project"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Model"
      responses:
        "200":
          description: "Model updated"
    delete:
      tags: ["models"]
      summary: "Delete model by name in project"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Model deleted"

  /projects/{project_id}/models/{model_name}/related_models_count:
    get:
      tags: ["models"]
      summary: "Get related models count"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /projects/{project_id}/models/{model_name}/fields/{field_key}/description:
    put:
      tags: ["models"]
      summary: "Edit model field description"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
        - in: path
          name: field_key
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
      responses:
        "200":
          description: "Field description updated"

  /projects/{project_id}/models/{model_name}/lookup:
    get:
      tags: ["models"]
      summary: "Lookup model data"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /projects/{project_id}/models/{model_name}/stats/{field}:
    get:
      tags: ["stats"]
      summary: "Get stats for a model field"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
        - in: path
          name: field
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /projects/{project_id}/{model}/stats/{field}:
    get:
      tags: ["stats"]
      summary: "Get stats for a model in a project"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model
          required: true
          schema:
            type: string
        - in: path
          name: field
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /records:
    get:
      tags: ["records"]
      summary: "List all records"
      responses:
        "200":
          description: "Successful operation"
    post:
      tags: ["records"]
      summary: "Create a new record"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Record"
      responses:
        "201":
          description: "Record created"

  /records/stats/{field}:
    get:
      tags: ["stats"]
      summary: "Get stats for a record field"
      parameters:
        - in: path
          name: field
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /projects/{project_id}/models/{model_name}/records:
    get:
      tags: ["records"]
      summary: "List records for a model in a project"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /projects/{project_id}/models/{model_name}/records/upload:
    post:
      tags: ["upload"]
      summary: "Upload records via TSV"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: "Records uploaded"

  /projects/{project_id}/models/{model_name}/records/{record_id}:
    get:
      tags: ["records"]
      summary: "Get record by ID"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
        - in: path
          name: record_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"
    put:
      tags: ["records"]
      summary: "Update record by ID"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
        - in: path
          name: record_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Record"
      responses:
        "200":
          description: "Record updated"
    delete:
      tags: ["records"]
      summary: "Delete record by ID"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
        - in: path
          name: record_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Record deleted"

  /projects/{project_id}/models/{model_name}/records/{record_id}/related_records:
    get:
      tags: ["records"]
      summary: "Get related records for a record"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
        - in: path
          name: record_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /links:
    get:
      tags: ["links"]
      summary: "List all links"
      responses:
        "200":
          description: "Successful operation"
    post:
      tags: ["links"]
      summary: "Create a new link"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileLink"
      responses:
        "201":
          description: "Link created"

  /links/stats/{field}:
    get:
      tags: ["stats"]
      summary: "Get stats for a link field"
      parameters:
        - in: path
          name: field
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /projects/{project_id}/models/{model_name}/links:
    get:
      tags: ["links"]
      summary: "List links for a model in a project"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

  /projects/{project_id}/models/{model_name}/links/{type}/{name}:
    get:
      tags: ["links"]
      summary: "Get a specific link by type and name"
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
        - in: path
          name: model_name
          required: true
          schema:
            type: string
        - in: path
          name: type
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful operation"

components:
  schemas:
    Analysis:
      type: "object"
      description: "object containing the analysis"
      properties:
        id:
          type: "string"  
        experiment_id:
          type: "string"
        metadata:
          type: "object"
          description: "user defined metadata object schema"
    
    File:
      type: "object"
      description: "general file object"
      properties:
        id: 
          type: "string"
        location:
          type: "object"
          properties:
            protocol:
              type: "string"
              enum:
              - "FTP"
              - "HTTP"
              - "RL"
            path: 
              type: "string"
            
    Experiment:
      type: "object"
      description: "Raw or Mapped experiments"
      properties:
        id:
          type: "string"
        biosample_id:
          type: "string"
        metadata:
          type: "object"
          description: "user defined metadata object schema"

    BioSample:
      type: "object"
      properties:
        id:
          type: "string"
        metadata:
          type: "object"
          description: "user defined metadata object schema"

    Researcher:
      type: "object"
      properties:
        name: 
          type: "string"
        role:
          type: "string"
          enum:
            - "researcher"
            - "sample_manager"
            - "experiment_manager"
            - "data_manager"
            - "admin"

    MetadataSchema:
      type: "object"
      properties: 
        name: 
          type: "string"
        path:
          type: "string"
        model: 
          type: "string"
          enum:
            - "biosample"
            - "experiment"

    Project:
      type: "object"
      properties: 
        name:
          type: "string"
        description:
          type: "string"
        version:
          type: "string"
        archived:
          type: "boolean"
        created_by:
          type: "string"

    Model:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        reference_model:
          type: "string"
        project_id:
          type: "string"
        inherit_reference_id:
          type: "boolean"
        fields:
          type: "array"
          items:
            $ref: "#/components/schemas/Filter"
    Record:
      type: "object"
      properties:
        item_id:
          type: "string"
        model_name:
          type: "string"
        project_id:
          type: "string"
        reference_id:
          type: "string"
        created_by:
          type: "string"
      additionalProperties:
        oneOf:
          - type: "string"
          - type: "number"
          - type: "string"
            format: "date"
          - type: "array"
            items:
              type: "string"
      description: "Record object with dynamic attributes based on Filter schema. Additional properties can be added where the key is the Field name and the value matches the Field type."

    FileLink:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        type:
          type: "string"
          enum:
            - "images"
            - "protocols"
            - "analysis"
        created_by:
          type: "string"
        project_id:
          type: "string"
        model_name:
          type: "string"

    Filter:
      type: "object"
      properties:
        key:
          type: "string"
        required:
          type: "boolean"
        multi:
          type: "boolean"
        regex:
          type: "string"
        choices:
          type: "array"
          items:
            type: "string"
        description:
          type: "string"
        type:
          type: "string"
          enum:
            - "text"
            - "number"
            - "date"
            - "select"


